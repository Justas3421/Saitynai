openapi: "3.0.0"
info:
  title: Landlord Building and Flat Management API
  version: "1.0"
servers:
  - url: https://api.server.test/v1
paths:
  /landlords:
    get:
      summary: Get a list of landlords
      tags:
        - landlord
      operationId: getLandlords
      responses:
        "200":
          description: A list of landlords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/landlord"
              examples:
                example:
                  value:
                    - id: 1
                      name: "John Doe"
                      email: "john.doe@example.com"
                      phone_number: "+1234567890"
                      createdAt: "2021-01-01T12:00:00Z"
                      updatedAt: "2021-01-02T12:00:00Z"
                    - id: 2
                      name: "Jane Smith"
                      email: "jane.smith@example.com"
                      phone_number: "+0987654321"
                      createdAt: "2021-02-01T12:00:00Z"
                      updatedAt: "2021-02-02T12:00:00Z"
    post:
      summary: Create a landlord
      tags:
        - landlord
      operationId: createLandlord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createLandlord"
            examples:
              example:
                value:
                  name: "Alice Johnson"
                  email: "alice.johnson@example.com"
                  phone_number: "+1122334455"
      responses:
        "201":
          $ref: "#/components/responses/singleLandlord"
        "400":
          $ref: "#/components/responses/badRequest"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
  /landlords/{landlordId}:
    parameters:
      - $ref: "#/components/parameters/landlordId"
    get:
      summary: Get landlord by ID
      tags:
        - landlord
      operationId: getLandlord
      responses:
        "200":
          $ref: "#/components/responses/singleLandlord"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update landlord by ID
      tags:
        - landlord
      operationId: updateLandlord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateLandlord"
            examples:
              example:
                value:
                  name: "Updated Name"
                  email: "updated.email@example.com"
                  phone_number: "+9988776655"
      responses:
        "200":
          $ref: "#/components/responses/singleLandlord"
        "400":
          $ref: "#/components/responses/badRequest"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete landlord by ID
      tags:
        - landlord
      operationId: deleteLandlord
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "204":
          description: Landlord deleted
  /landlords/{landlordId}/buildings:
    parameters:
      - $ref: "#/components/parameters/landlordId"
    get:
      summary: Get buildings for a landlord
      tags:
        - building
      operationId: getBuildings
      responses:
        "200":
          description: A list of buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/building"
              examples:
                example:
                  value:
                    - id: 1
                      landlord:
                        id: 1
                        name: "John Doe"
                      name: "Sunset Apartments"
                      address: "123 Main St"
                      city: "Anytown"
                      state: "Anystate"
                      zip_code: "12345"
                      number_of_floors: 10
                      createdAt: "2021-03-01T12:00:00Z"
                      updatedAt: "2021-03-02T12:00:00Z"
                    - id: 2
                      landlord:
                        id: 1
                        name: "John Doe"
                      name: "Lakeside Towers"
                      address: "456 Lake St"
                      city: "Anytown"
                      state: "Anystate"
                      zip_code: "12345"
                      number_of_floors: 15
                      createdAt: "2021-04-01T12:00:00Z"
                      updatedAt: "2021-04-02T12:00:00Z"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      summary: Add a building
      tags:
        - building
      operationId: createBuilding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createBuilding"
            examples:
              example:
                value:
                  landlord_id: 1
                  name: "Ocean View Condos"
                  address: "789 Ocean Dr"
                  city: "Beach City"
                  state: "Sunstate"
                  zip_code: "67890"
                  number_of_floors: 20
      responses:
        "201":
          $ref: "#/components/responses/singleBuilding"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
  /landlords/{landlordId}/buildings/{buildingId}:
    parameters:
      - $ref: "#/components/parameters/landlordId"
      - $ref: "#/components/parameters/buildingId"
    get:
      summary: Get a specific building for a landlord
      tags:
        - building
      operationId: getBuilding
      responses:
        "200":
          $ref: "#/components/responses/singleBuilding"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update a building for a landlord
      tags:
        - building
      operationId: updateBuilding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateBuilding"
            examples:
              example:
                value:
                  name: "Updated Building Name"
                  address: "Updated Address"
                  city: "Updated City"
                  state: "Updated State"
                  zip_code: "99999"
                  number_of_floors: 25
      responses:
        "200":
          $ref: "#/components/responses/singleBuilding"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete a building for a landlord
      tags:
        - building
      operationId: deleteBuilding
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "204":
          description: Building deleted
  /landlords/{landlordId}/buildings/{buildingId}/flats:
    parameters:
      - $ref: "#/components/parameters/landlordId"
      - $ref: "#/components/parameters/buildingId"
    get:
      summary: Get flats for a specific building
      tags:
        - flat
      operationId: getFlats
      responses:
        "200":
          description: A list of flats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/flat"
              examples:
                example:
                  value:
                    - id: 1
                      building:
                        id: 1
                        name: "Sunset Apartments"
                      flat_number: "1A"
                      number_of_bedrooms: 2
                      number_of_bathrooms: 1
                      rent_amount: 1200.00
                      is_occupied: true
                      tenant_name: "Tenant One"
                    - id: 2
                      building:
                        id: 1
                        name: "Sunset Apartments"
                      flat_number: "2B"
                      number_of_bedrooms: 3
                      number_of_bathrooms: 2
                      rent_amount: 1500.00
                      is_occupied: false
                      tenant_name: null
        "404":
          $ref: "#/components/responses/notFound"
    post:
      summary: Add a flat for a specific building
      tags:
        - flat
      operationId: createFlat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createFlat"
            examples:
              example:
                value:
                  building_id: 1
                  flat_number: "3C"
                  is_occupied: false
                  number_of_bedrooms: 2
                  number_of_bathrooms: 1
                  rent_amount: 1300.00
                  tenant_name: null
      responses:
        "201":
          $ref: "#/components/responses/singleFlat"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
  /landlords/{landlordId}/buildings/{buildingId}/flats/{flatId}:
    parameters:
      - $ref: "#/components/parameters/landlordId"
      - $ref: "#/components/parameters/buildingId"
      - $ref: "#/components/parameters/flatId"
    get:
      summary: Get a specific flat
      tags:
        - flat
      operationId: getFlat
      responses:
        "200":
          $ref: "#/components/responses/singleFlat"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update a flat
      tags:
        - flat
      operationId: updateFlat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateFlat"
            examples:
              example:
                value:
                  flat_number: "Updated Flat Number"
                  is_occupied: true
                  number_of_bedrooms: 3
                  number_of_bathrooms: 2
                  rent_amount: 1600.00
                  tenant_name: "New Tenant"
      responses:
        "200":
          $ref: "#/components/responses/singleFlat"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete a flat
      tags:
        - flat
      operationId: deleteFlat
      responses:
        "404":
          $ref: "#/components/responses/notFound"
        "204":
          description: Flat deleted
components:
  schemas:
    problemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        status:
          type: integer
          format: int32
          description: The HTTP status code applicable to this problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: A map of detailed errors for every property ([property => error])
    landlord:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: 1
        name: "John Doe"
        email: "john.doe@example.com"
        phone_number: "+1234567890"
        createdAt: "2021-01-01T12:00:00Z"
        updatedAt: "2021-01-02T12:00:00Z"
    createLandlord:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          minLength: 5
          maxLength: 50
        phone_number:
          type: string
          minLength: 8
          maxLength: 50
      example:
        name: "Alice Johnson"
        email: "alice.johnson@example.com"
        phone_number: "+1122334455"
    updateLandlord:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          minLength: 5
          maxLength: 50
        phone_number:
          type: string
          minLength: 8
          maxLength: 50
      example:
        name: "Updated Name"
        email: "updated.email@example.com"
        phone_number: "+9988776655"
    building:
      type: object
      properties:
        id:
          type: integer
        landlord:
          type: object
        name:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip_code:
          type: string
        number_of_floors:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: 1
        landlord:
          id: 1
          name: "John Doe"
        name: "Sunset Apartments"
        address: "123 Main St"
        city: "Anytown"
        state: "Anystate"
        zip_code: "12345"
        number_of_floors: 10
        createdAt: "2021-03-01T12:00:00Z"
        updatedAt: "2021-03-02T12:00:00Z"
    createBuilding:
      type: object
      required:
        - landlord_id
        - name
        - address
        - city
        - state
        - zip_code
      properties:
        landlord_id:
          type: integer
        name:
          type: string
          minLength: 2
          maxLength: 50
        address:
          type: string
          minLength: 5
          maxLength: 50
        city:
          type: string
          minLength: 2
          maxLength: 50
        state:
          type: string
          minLength: 2
          maxLength: 50
        zip_code:
          type: string
          minLength: 5
          maxLength: 10
        number_of_floors:
          type: integer
      example:
        landlord_id: 1
        name: "Ocean View Condos"
        address: "789 Ocean Dr"
        city: "Beach City"
        state: "Sunstate"
        zip_code: "67890"
        number_of_floors: 20
    updateBuilding:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        address:
          type: string
          minLength: 5
          maxLength: 50
        city:
          type: string
          minLength: 2
          maxLength: 50
        state:
          type: string
          minLength: 2
          maxLength: 50
        zip_code:
          type: string
          minLength: 5
          maxLength: 10
      example:
        name: "Updated Building Name"
        address: "Updated Address"
        city: "Updated City"
        state: "Updated State"
        zip_code: "99999"
    flat:
      type: object
      properties:
        id:
          type: integer
        building:
          type: object 
        flat_number:
          type: string
        number_of_bedrooms:
          type: integer
        number_of_bathrooms:
          type: integer
        rent_amount:
          type: number
          format: float
        is_occupied:
          type: boolean
        tenant_name:
          type: string
      example:
        id: 1
        building:
          id: 1
          name: "Sunset Apartments"
        flat_number: "1A"
        number_of_bedrooms: 2
        number_of_bathrooms: 1
        rent_amount: 1200.00
        is_occupied: true
        tenant_name: "Tenant One"
    createFlat:
      type: object
      required:
        - building_id
        - flat_number
        - is_occupied
      properties:
        building_id:
          type: integer 
        flat_number:
          type: string
          minLength: 2
          maxLength: 50
        is_occupied:
          type: boolean
        number_of_bedrooms:
          type: integer
        number_of_bathrooms:
          type: integer
        rent_amount:
          type: number
        tenant_name:
          type: string
          minLength: 2
          maxLength: 50
      example:
        building_id: 1
        flat_number: "3C"
        is_occupied: false
        number_of_bedrooms: 2
        number_of_bathrooms: 1
        rent_amount: 1300.00
        tenant_name: null
    updateFlat:
      type: object
      properties: 
        flat_number:
          type: string
          minLength: 2
          maxLength: 50
        is_occupied:
          type: boolean
        number_of_bedrooms:
          type: integer
        number_of_bathrooms:
          type: integer
        rent_amount:
          type: number
        tenant_name:
          type: string
          minLength: 2
          maxLength: 50
      example:
        flat_number: "Updated Flat Number"
        is_occupied: true
        number_of_bedrooms: 3
        number_of_bathrooms: 2
        rent_amount: 1600.00
        tenant_name: "New Tenant"
  responses:
    singleLandlord:
      description: A landlord
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/landlord"
          examples:
            example:
              value:
                id: 1
                name: "John Doe"
                email: "john.doe@example.com"
                phone_number: "+1234567890"
                createdAt: "2021-01-01T12:00:00Z"
                updatedAt: "2021-01-02T12:00:00Z"
    singleBuilding:
      description: A building
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/building"
          examples:
            example:
              value:
                id: 1
                landlord:
                  id: 1
                  name: "John Doe"
                name: "Sunset Apartments"
                address: "123 Main St"
                city: "Anytown"
                state: "Anystate"
                zip_code: "12345"
                number_of_floors: 10
                createdAt: "2021-03-01T12:00:00Z"
                updatedAt: "2021-03-02T12:00:00Z"
    singleFlat:
      description: A flat
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/flat"
          examples:
            example:
              value:
                id: 1
                building:
                  id: 1
                  name: "Sunset Apartments"
                flat_number: "1A"
                number_of_bedrooms: 2
                number_of_bathrooms: 1
                rent_amount: 1200.00
                is_occupied: true
                tenant_name: "Tenant One"
    unprocessableEntity:
      description: Unprocessable entity response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          examples:
            example:
              value:
                type: "https://api.server.test/errors/unprocessable-entity"
                title: "Unprocessable Entity"
                status: 422
                detail: "Validation errors occurred."
                instance: "/request/12345"
                errors:
                  email:
                    - "Email is invalid."
                  name:
                    - "Name must be at least 2 characters."
    badRequest:
      description: Bad request response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          examples:
            example:
              value:
                type: "https://api.server.test/errors/bad-request"
                title: "Bad Request"
                status: 400
                detail: "Invalid request parameters."
                instance: "/request/12345"
    notFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          examples:
            example:
              value:
                type: "https://api.server.test/errors/not-found"
                title: "Not Found"
                status: 404
                detail: "The requested resource was not found."
                instance: "/request/12345"
  parameters:
    landlordId:
      name: landlordId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the landlord
    buildingId:
      name: buildingId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the building
    flatId:
      name: flatId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the flat
tags:
  - name: landlord
    description: Operations related to landlords
  - name: building
    description: Operations related to buildings
  - name: flat
    description: Operations related to flats
